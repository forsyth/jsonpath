$ -> 
$(key,more) -> !unexpected token (
$. -> !unexpected end of file at offset 1
$.$ -> !unexpected $ at offset 2
$.'key' -> !unexpected string literal at offset 6
$.'some.key' -> !unexpected string literal at offset 11
$.* -> Wild
$.*.* -> Wild Wild
$.*.bar.* -> bar Wild ID[0] Member.1 Wild
$.*['c','d'] -> "c" "d" Wild String[0] String[1] Union.2
$.*[1] -> Wild Int(1) Select.1
$.-1 -> Int(-1) Member.1
$.. -> !unexpected end of file at offset 2
$..'key' -> !unexpected string literal at offset 7
$..* -> Nest.3 NestWild Rep.1
$..*[?(@.id>2)] -> id Nest.3 NestWild Rep.1 For.11 Current ID[0] Dot.2 Int(2) GT.2 Filter.1 Rep.4
$..[*] -> Nest.3 NestWild Rep.1
$..[0] -> Nest.4 Int(0) NestSelect.1 Rep.1
$..[1].key -> key Nest.4 Int(1) NestSelect.1 Rep.1 ID[0] Member.1
$..[?(@.id)] -> id Nest.6 Current ID[0] Dot.2 NestFilter.1 Rep.1
$..[?(@.id==2)] -> id Nest.8 Current ID[0] Dot.2 Int(2) EQ.2 NestFilter.1 Rep.1
$.."key" -> !unexpected string literal at offset 7
$..key -> key Nest.4 ID[0] NestMember.1 Rep.1
$.2 -> Int(2) Member.1
$.['key'] -> !unexpected [ at offset 2
$.["key"] -> !unexpected [ at offset 2
$.[key] -> !unexpected [ at offset 2
$."key" -> !unexpected string literal at offset 6
$.id -> id ID[0] Member.1
$.in -> in ID[0] Member.1
$.items[?(@.key==$.value)] -> items key value ID[0] Member.1 For.12 Current ID[1] Dot.2 Root ID[2] Dot.2 EQ.2 Filter.1 Rep.3
$.key -> key ID[0] Member.1
$.key-dash -> key-dash ID[0] Member.1
$.key.. -> !unexpected end of file at offset 6
$.length -> length ID[0] Member.1
$.missing -> missing ID[0] Member.1
$.null -> null ID[0] Member.1
$.store..price -> store price ID[0] Member.1 Nest.6 ID[1] NestMember.1 Rep.3
$.true -> true ID[0] Member.1
$.屬性 -> 屬性 ID[0] Member.1
$[ 0 , 1 ] -> Int(0) Int(1) Union.2
$['$'] -> "$" String[0] Select.1
$[''] -> "" String[0] Select.1
$['*'] -> "*" String[0] Select.1
$[','] -> "," String[0] Select.1
$['.'] -> "." String[0] Select.1
$['.*'] -> ".*" String[0] Select.1
$['0'] -> "0" String[0] Select.1
$[':'] -> ":" String[0] Select.1
$[':@."$,*\'\\'] -> ":@.\"$,*'\\" String[0] Select.1
$['@'] -> "@" String[0] Select.1
$['"'] -> "\"" String[0] Select.1
$['\''] -> "'" String[0] Select.1
$['\\'] -> "\\" String[0] Select.1
$[']'] -> "]" String[0] Select.1
$['key','another'] -> "key" "another" String[0] String[1] Union.2
$['key'] -> "key" String[0] Select.1
$['missing','key'] -> "missing" "key" String[0] String[1] Union.2
$['missing'] -> "missing" String[0] Select.1
$['ni.*'] -> "ni.*" String[0] Select.1
$['one','three'].key -> "one" "three" key String[0] String[1] Union.2 ID[2] Member.1
$['single'quote'] -> !expected "]" at offset 14, got identifier
$['two'.'some'] -> !expected "]" at offset 7, got .
$['two.some'] -> "two.some" String[0] Select.1
$['ü'] -> "ü" String[0] Select.1
$[(@.length-1)] -> length Current ID[0] Dot.2 Int(1) Sub.2 Select.1
$[*,1] -> !* cannot be in a union element list
$[*] -> Wild
$[*].a -> a Wild ID[0] Member.1
$[*].bar[*] -> bar Wild ID[0] Member.1 Wild
$[-113667776004:2] -> [-113667776004:2] Bounds[0] Select.1
$[-1:] -> [-1:] Bounds[0] Select.1
$[-1] -> Int(-1) Select.1
$[-2:] -> [-2:] Bounds[0] Select.1
$[-2] -> Int(-2) Select.1
$[-4:-3] -> [-4:-3] Bounds[0] Select.1
$[-4:-4] -> [-4:-4] Bounds[0] Select.1
$[-4:-5] -> [-4:-5] Bounds[0] Select.1
$[-4:1] -> [-4:1] Bounds[0] Select.1
$[-4:2] -> [-4:2] Bounds[0] Select.1
$[-4:3] -> [-4:3] Bounds[0] Select.1
$[-4:] -> [-4:] Bounds[0] Select.1
$[0,1] -> Int(0) Int(1) Union.2
$[0,2].key -> key Int(0) Int(2) Union.2 ID[0] Member.1
$[010:024:010] -> [10:24:10] Bounds[0] Select.1
$[0:0] -> [0:0] Bounds[0] Select.1
$[0:1] -> [0:1] Bounds[0] Select.1
$[0:2][*] -> [0:2] Bounds[0] Select.1 Wild
$[0:3:-2] -> [0:3:-2] Bounds[0] Select.1
$[0:3:0] -> [0:3:0] Bounds[0] Select.1
$[0:3:1] -> [0:3:1] Bounds[0] Select.1
$[0:3:2] -> [0:3:2] Bounds[0] Select.1
$[0:4:2] -> [0:4:2] Bounds[0] Select.1
$[0:5] -> [0:5] Bounds[0] Select.1
$[0] -> Int(0) Select.1
$[0]['c','d'] -> "c" "d" Int(0) Select.1 String[0] String[1] Union.2
$[113667776004:2:-1] -> [113667776004:2:-1] Bounds[0] Select.1
$[1:10] -> [1:10] Bounds[0] Select.1
$[1:3,4] -> [1:3] Bounds[0] Int(4) Union.2
$[1:3:] -> [1:3] Bounds[0] Select.1
$[1:3] -> [1:3] Bounds[0] Select.1
$[1:] -> [1:] Bounds[0] Select.1
$[1] -> Int(1) Select.1
$[2:-113667776004:-1] -> [2:-113667776004:-1] Bounds[0] Select.1
$[2:113667776004] -> [2:113667776004] Bounds[0] Select.1
$[2:1] -> [2:1] Bounds[0] Select.1
$[2] -> Int(2) Select.1
$[3:-2] -> [3:-2] Bounds[0] Select.1
$[3:-3] -> [3:-3] Bounds[0] Select.1
$[3:-4] -> [3:-4] Bounds[0] Select.1
$[3:0:-2] -> [3:0:-2] Bounds[0] Select.1
$[3::-1] -> [3::-1] Bounds[0] Select.1
$[4,1] -> Int(4) Int(1) Union.2
$[7:10] -> [7:10] Bounds[0] Select.1
$[7:3:-1] -> [7:3:-1] Bounds[0] Select.1
$[:2:-1] -> [:2:-1] Bounds[0] Select.1
$[:2] -> [:2] Bounds[0] Select.1
$[::-2] -> [::-2] Bounds[0] Select.1
$[::2] -> [::2] Bounds[0] Select.1
$[::] -> [:] Bounds[0] Select.1
$[:] -> [:] Bounds[0] Select.1
$[:]['c','d'] -> [:] "c" "d" Bounds[0] Select.1 String[1] String[2] Union.2
$[?(!(@.key<42))] -> key For.9 Current ID[0] Dot.2 Int(42) LT.2 Not.1 Filter.1 Rep.1
$[?(!(@.key==42))] -> key For.9 Current ID[0] Dot.2 Int(42) EQ.2 Not.1 Filter.1 Rep.1
$[?(!@.key)] -> key For.7 Current ID[0] Dot.2 Not.1 Filter.1 Rep.1
$[?()] -> !unexpected token ) in expression term
$[?(1==1)] -> For.6 Int(1) Int(1) EQ.2 Filter.1 Rep.1
$[?(2 in @.d)] -> d For.8 Int(2) Current ID[0] Dot.2 In.2 Filter.1 Rep.1
$[?(@)] -> For.4 Current Filter.1 Rep.1
$[?(@.*==2)] -> !expected identifier in '.' selection
$[?(@.*==[1,2])] -> !expected identifier in '.' selection
$[?(@.a && (@.b || @.c))] -> a b c For.14 Current ID[0] Dot.2 Current ID[1] Dot.2 Current ID[2] Dot.2 Or.2 And.2 Filter.1 Rep.1
$[?(@.a && @.b || @.c)] -> a b c For.14 Current ID[0] Dot.2 Current ID[1] Dot.2 And.2 Current ID[2] Dot.2 Or.2 Filter.1 Rep.1
$[?(@.a[?(@.price>10)])] -> !unexpected character '?' at offset 8
$[?(@.address.city=='Berlin')] -> address city "Berlin" For.10 Current ID[0] Dot.2 ID[1] Dot.2 String[2] EQ.2 Filter.1 Rep.1
$[?(@.d in [2, 3])] -> d For.10 Current ID[0] Dot.2 Int(2) Int(3) Array.2 In.2 Filter.1 Rep.1
$[?(@.d==['v1','v2'])] -> d "v1" "v2" For.10 Current ID[0] Dot.2 String[1] String[2] Array.2 EQ.2 Filter.1 Rep.1
$[?(@.d==["v1","v2"])] -> d "v1" "v2" For.10 Current ID[0] Dot.2 String[1] String[2] Array.2 EQ.2 Filter.1 Rep.1
$[?(@.d=={"k":"v"})] -> !unexpected character '{' at offset 9
$[?(@.id==2)] -> id For.8 Current ID[0] Dot.2 Int(2) EQ.2 Filter.1 Rep.1
$[?(@.id==42)].name -> id name For.8 Current ID[0] Dot.2 Int(42) EQ.2 Filter.1 Rep.1 ID[1] Member.1
$[?(@.key!=42)] -> key For.8 Current ID[0] Dot.2 Int(42) NE.2 Filter.1 Rep.1
$[?(@.key)] -> key For.6 Current ID[0] Dot.2 Filter.1 Rep.1
$[?(@.key*2==100)] -> key For.10 Current ID[0] Dot.2 Int(2) Mul.2 Int(100) EQ.2 Filter.1 Rep.1
$[?(@.key+50==100)] -> key For.10 Current ID[0] Dot.2 Int(50) Add.2 Int(100) EQ.2 Filter.1 Rep.1
$[?(@.key-50==-100)] -> key For.11 Current ID[0] Dot.2 Int(50) Sub.2 Int(100) Neg.1 EQ.2 Filter.1 Rep.1
$[?(@.key/10==5)] -> key For.10 Current ID[0] Dot.2 Int(10) Div.2 Int(5) EQ.2 Filter.1 Rep.1
$[?(@.key<3),?(@.key>6)] -> !?(filter) cannot be in a union element list
$[?(@.key<42)] -> key For.8 Current ID[0] Dot.2 Int(42) LT.2 Filter.1 Rep.1
$[?(@.key<=42)] -> key For.8 Current ID[0] Dot.2 Int(42) LE.2 Filter.1 Rep.1
$[?(@.key=42)] -> !expected ")" at offset 9, got =
$[?(@.key=='value')] -> key "value" For.8 Current ID[0] Dot.2 String[1] EQ.2 Filter.1 Rep.1
$[?(@.key==-0.123e2)] -> key 12.3 For.9 Current ID[0] Dot.2 Real[1] Neg.1 EQ.2 Filter.1 Rep.1
$[?(@.key==010)] -> key For.8 Current ID[0] Dot.2 Int(10) EQ.2 Filter.1 Rep.1
$[?(@.key==42)] -> key For.8 Current ID[0] Dot.2 Int(42) EQ.2 Filter.1 Rep.1
$[?(@.key==43)] -> key For.8 Current ID[0] Dot.2 Int(43) EQ.2 Filter.1 Rep.1
$[?(@.key===42)] -> !unexpected token = in expression term
$[?(@.key=="hi@example.com")] -> key "hi@example.com" For.8 Current ID[0] Dot.2 String[1] EQ.2 Filter.1 Rep.1
$[?(@.key=="some.value")] -> key "some.value" For.8 Current ID[0] Dot.2 String[1] EQ.2 Filter.1 Rep.1
$[?(@.key=="value")] -> key "value" For.8 Current ID[0] Dot.2 String[1] EQ.2 Filter.1 Rep.1
$[?(@.key==false)] -> key For.8 Current ID[0] Dot.2 Bool(0) EQ.2 Filter.1 Rep.1
$[?(@.key==null)] -> key For.8 Current ID[0] Dot.2 Null EQ.2 Filter.1 Rep.1
$[?(@.key==true)] -> key For.8 Current ID[0] Dot.2 Bool(1) EQ.2 Filter.1 Rep.1
$[?(@.key>42 && @.key<44)] -> key For.14 Current ID[0] Dot.2 Int(42) GT.2 Current ID[0] Dot.2 Int(44) LT.2 And.2 Filter.1 Rep.1
$[?(@.key>42)] -> key For.8 Current ID[0] Dot.2 Int(42) GT.2 Filter.1 Rep.1
$[?(@.key>43 || @.key<43)] -> key For.14 Current ID[0] Dot.2 Int(43) GT.2 Current ID[0] Dot.2 Int(43) LT.2 Or.2 Filter.1 Rep.1
$[?(@.key>=42)] -> key For.8 Current ID[0] Dot.2 Int(42) GE.2 Filter.1 Rep.1
$[?(@.name=~/hello.*/)] -> name "hello.*" For.8 Current ID[0] Dot.2 RE[1] Match.2 Filter.1 Rep.1
$[?(@==42)] -> For.6 Current Int(42) EQ.2 Filter.1 Rep.1
$[?(@['@key']==42)] -> "@key" For.8 Current String[0] Index.2 Int(42) EQ.2 Filter.1 Rep.1
$[?(@['key']==42)] -> "key" For.8 Current String[0] Index.2 Int(42) EQ.2 Filter.1 Rep.1
$[?(@[*]==2)] -> !unexpected token * in expression term
$[?(@[-1]==2)] -> For.9 Current Int(1) Neg.1 Index.2 Int(2) EQ.2 Filter.1 Rep.1
$[?(@[0:1]==1)] -> !unexpected character ':' at offset 7
$[?(@[0:1]==[1])] -> !unexpected character ':' at offset 7
$[?(@[1]=='b')] -> "b" For.8 Current Int(1) Index.2 String[0] EQ.2 Filter.1 Rep.1
$[?(false)] -> For.4 Bool(0) Filter.1 Rep.1
$[?(null)] -> For.4 Null Filter.1 Rep.1
$[?(true)] -> For.4 Bool(1) Filter.1 Rep.1
$[?@.key==42] -> !unexpected char '@' after '(' at offset 2
$[""] -> "" String[0] Select.1
$["key"] -> "key" String[0] Select.1
$[] -> !unexpected ] at offset 2
$[key] -> key ID[0] Select.1
$[two.some] -> !expected "]" at offset 5, got .
$.store.book[?(@.price < 10)].title -> store book price title ID[0] Member.1 ID[1] Member.1 For.12 Current ID[2] Dot.2 Int(10) LT.2 Filter.1 Rep.5 ID[3] Member.1
$['store'].book[?(@.price < 10)].title -> "store" book price title String[0] Select.1 ID[1] Member.1 For.12 Current ID[2] Dot.2 Int(10) LT.2 Filter.1 Rep.5 ID[3] Member.1
$..book[(@.length-1)] -> book length Nest.4 ID[0] NestMember.1 Rep.1 Current ID[1] Dot.2 Int(1) Sub.2 Select.1
$['store'].book[?(@.price >= 20 && @.price <= 50 || (  true 	))].title -> "store" book price title String[0] Select.1 ID[1] Member.1 For.20 Current ID[2] Dot.2 Int(20) GE.2 Current ID[2] Dot.2 Int(50) LE.2 And.2 Bool(1) Or.2 Filter.1 Rep.5 ID[3] Member.1
$[':@.\"$,*\\'\\\\'] -> !unknown character escape sequence
# (chf) added tests not covered above
$[?(-9223372036854775807 > 0)] -> 9223372036854775807 For.7 Int[0] Neg.1 Int(0) GT.2 Filter.1 Rep.1
$[?(-9223372036854775808 > 0)] -> !strconv.ParseInt: parsing "9223372036854775808": value out of range
$..[?(@.book =~ /fruitbat.*\/$|(help|need|somebody)/)] -> book "fruitbat.*/$|(help|need|somebody)" Nest.8 Current ID[0] Dot.2 RE[1] Match.2 NestFilter.1 Rep.1
$[?(@.d==['v1',3*7+5])] -> d "v1" For.14 Current ID[0] Dot.2 String[1] Int(3) Int(7) Mul.2 Int(5) Add.2 Array.2 EQ.2 Filter.1 Rep.1
$..[?(@.book =~ /incorrect regexp)/] -> !error parsing regexp: unexpected ): `incorrect regexp)` at offset 16
